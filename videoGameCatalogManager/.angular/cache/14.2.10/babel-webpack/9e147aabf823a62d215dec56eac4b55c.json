{"ast":null,"code":"import * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\n\nconst _c3 = function (a0) {\n  return {\n    enterDuration: a0\n  };\n};\n\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    disableToggleValue: false\n  })\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n\nlet nextUniqueId = 0;\n/** @docs-private */\n\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\n\nclass MatSlideToggleChange {\n  constructor(\n  /** The source MatSlideToggle of the event. */\n  source,\n  /** The new `checked` value of the MatSlideToggle. */\n  checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n\n} // Boilerplate for applying mixins to MatSlideToggle.\n\n/** @docs-private */\n\n\nconst _MatSlideToggleBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n\n\nclass MatSlideToggle extends _MatSlideToggleBase {\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.defaults = defaults;\n\n    this._onChange = _ => {};\n\n    this._onTouched = () => {};\n\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /** Name value will be applied to the input element if present. */\n\n    this.name = null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n\n    this.id = this._uniqueId;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n\n    this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n\n    this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n\n    this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n\n    this.toggleChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.color = this.defaultColor = defaults.color || 'accent';\n    this._noopAnimations = animationMode === 'NoopAnimations';\n  }\n  /** Whether the slide-toggle is required. */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Whether the slide-toggle element is checked or not. */\n\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Returns the unique id for the visual hidden input. */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      // Only forward focus manually when it was received programmatically or through the\n      // keyboard. We should not do this for mouse/touch focus for two reasons:\n      // 1. It can prevent clicks from landing in Chrome (see #18269).\n      // 2. They're already handled by the wrapping `label` element.\n      if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n        this._inputElement.nativeElement.focus();\n      } else if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /** Method being called whenever the underlying input emits a change event. */\n\n\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit(); // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    } // Sync the value from the underlying input element with the component instance.\n\n\n    this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n\n    this._emitChangeEvent();\n  }\n  /** Method being called whenever the slide-toggle has been clicked. */\n\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /** Implemented as a part of ControlValueAccessor. */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Focuses the slide-toggle. */\n\n\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /** Toggles the checked state of the slide-toggle. */\n\n\n  toggle() {\n    this.checked = !this.checked;\n\n    this._onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n\n\n  _emitChangeEvent() {\n    this._onChange(this.checked);\n\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /** Method being called whenever the label text changes. */\n\n\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n}\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatSlideToggle.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n      i0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [i0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 16,\n  vars: 20,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n      i0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 6, 7);\n      i0.ɵɵelement(8, \"div\", 8);\n      i0.ɵɵelementStart(9, \"div\", 9);\n      i0.ɵɵelement(10, \"div\", 10);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"span\", 11, 12);\n      i0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      i0.ɵɵelementStart(13, \"span\", 13);\n      i0.ɵɵtext(14, \"\\xA0\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(15);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      const _r4 = i0.ɵɵreference(12);\n\n      i0.ɵɵattribute(\"for\", ctx.inputId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", i0.ɵɵpureFunction1(18, _c3, ctx._noopAnimations ? 0 : 150));\n    }\n  },\n  dependencies: [i2.MatRipple, i3.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be `-1` so it can still receive programmatic focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_noopAnimations'\n      },\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n\nMatSlideToggleRequiredValidator.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSlideToggleRequiredValidator_BaseFactory;\n  return function MatSlideToggleRequiredValidator_Factory(t) {\n    return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator);\n  };\n}();\n\nMatSlideToggleRequiredValidator.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n\n\nclass _MatSlideToggleRequiredValidatorModule {}\n\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n  return new (t || _MatSlideToggleRequiredValidatorModule)();\n};\n\n_MatSlideToggleRequiredValidatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nclass MatSlideToggleModule {}\n\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\n\nMatSlideToggleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule], _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"names":["i3","ObserversModule","i0","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Inject","Optional","ViewChild","Input","Output","Directive","NgModule","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","i1","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","_MatSlideToggleBase","_elementRef","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","color","defaultColor","_noopAnimations","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","options","origin","focusVia","toggle","_onLabelTextChange","detectChanges","ɵfac","ElementRef","FocusMonitor","ChangeDetectorRef","ɵcmp","MatRipple","CdkObserveContent","type","args","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","_thumbEl","_thumbBarEl","ariaDescribedby","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","ɵdir","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatSlideToggleModule","imports"],"sources":["D:/Prog Gyak/SpringBootAngular/VideoGameCatalog/videoGameCatalogManager/node_modules/@angular/material/fesm2020/slide-toggle.mjs"],"sourcesContent":["import * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false }),\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true,\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nconst _MatSlideToggleBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n        this._noopAnimations = animationMode === 'NoopAnimations';\n    }\n    /** Whether the slide-toggle is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    ngAfterContentInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggle, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }, { token: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSlideToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatSlideToggle, selector: \"mat-slide-toggle\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"disabled ? null : -1\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"class.mat-checked\": \"checked\", \"class.mat-disabled\": \"disabled\", \"class.mat-slide-toggle-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_noopAnimations\" }, classAttribute: \"mat-slide-toggle\" }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_thumbEl\", first: true, predicate: [\"thumbContainer\"], descendants: true }, { propertyName: \"_thumbBarEl\", first: true, predicate: [\"toggleBar\"], descendants: true }, { propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }], exportAs: [\"matSlideToggle\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                        'class': 'mat-slide-toggle',\n                        '[id]': 'id',\n                        // Needs to be `-1` so it can still receive programmatic focus.\n                        '[attr.tabindex]': 'disabled ? null : -1',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[class.mat-checked]': 'checked',\n                        '[class.mat-disabled]': 'disabled',\n                        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                    }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _thumbEl: [{\n                type: ViewChild,\n                args: ['thumbContainer']\n            }], _thumbBarEl: [{\n                type: ViewChild,\n                args: ['toggleBar']\n            }], name: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], required: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], toggleChange: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggleRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatSlideToggleRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatSlideToggleRequiredValidator, selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\", providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggleRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatSlideToggleRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] });\n_MatSlideToggleRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatSlideToggleRequiredValidator],\n                    declarations: [MatSlideToggleRequiredValidator],\n                }]\n        }] });\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSlideToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggleModule, declarations: [MatSlideToggle], imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule], exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule] });\nMatSlideToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggleModule, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSlideToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        _MatSlideToggleRequiredValidatorModule,\n                        MatRippleModule,\n                        MatCommonModule,\n                        ObserversModule,\n                    ],\n                    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n                    declarations: [MatSlideToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}